// ******************************************************************
//       /\ /|       @file       ConfigManager.cs
//       \ V/        @brief      auto generated by RabiConfigGenerator.
//       | "")       @author     Shadowrabbit, yingtu0401@gmail.com
//       /  |
//      /  \\        @Modified   2022-04-23 22:40:15
//    *(__\_\        @Copyright  Copyright (c)  2022, Shadowrabbit
// ******************************************************************

using System.Collections.Generic;
using System.IO;
using RabiConfigLib;
using RiskAndReward.Configs;
using Debug = UnityEngine.Debug;

namespace RiskAndReward
{
    public sealed class ConfigManager : BaseSingleTon<ConfigManager>
    {
        private readonly Dictionary<string, CsvReader> _cfgName2CsvReader = new(); //csvName,data
        private string? _modDirectory; // mod目录路径
        public readonly CfgLootReward cfgLootReward = new();

        /// <summary>
        /// 初始化配置管理器
        /// </summary>
        /// <param name="modDirectory">mod目录路径，从OnAfterSetup传入info.path</param>
        public void Init(string? modDirectory)
        {
            _modDirectory = modDirectory; // 保存mod目录
            LoadSource();
        }

        /// <summary>
        /// Generate configuration
        /// </summary>
        public void GenerateConfigs()
        {
            cfgLootReward.Load(_cfgName2CsvReader[nameof(CfgLootReward)]);
        }

        /// <summary>
        /// Find data source
        /// </summary>
        /// <param name="cfgName"></param>
        /// <returns></returns>
        public CsvReader? FindData(string cfgName)
        {
            if (_cfgName2CsvReader.TryGetValue(cfgName, out var data)) return data;
            Debug.LogError($"[RabiConfigLib] Can't find data. cfgName:{cfgName}");
            return null;
        }

        /// <summary>
        /// Insert data
        /// </summary>
        /// <param name="cfgName"></param>
        /// <param name="reader"></param>
        public void InsertData(string cfgName, CsvReader reader)
        {
            if (_cfgName2CsvReader.ContainsKey(cfgName))
            {
                Debug.LogError($"[RabiConfigLib] Repeatedly loaded table, cfgName:{cfgName}");
                return;
            }

            _cfgName2CsvReader.Add(cfgName, reader);
        }

        /// <summary>
        /// 从mod目录加载Assets子目录下的所有txt文件
        /// </summary>
        private void LoadSource()
        {
            if (string.IsNullOrEmpty(_modDirectory))
            {
                Debug.LogError("[RabiConfigLib] Mod directory path is empty. Failed to load config files");
                return;
            }

            if (_modDirectory == null)
            {
                return;
            }

            var assetsPath = Path.Combine(_modDirectory, "Assets");
            if (!Directory.Exists(assetsPath))
            {
                Debug.LogError($"[RabiConfigLib] Assets directory does not exist: {assetsPath}");
                return;
            }

            Debug.Log($"[RabiConfigLib] Start loading config files from mod directory: {_modDirectory}");
            var txtFiles = Directory.GetFiles(assetsPath, "*.txt", SearchOption.AllDirectories);
            foreach (var filePath in txtFiles)
            {
                try
                {
                    LoadTxtFile(filePath);
                }
                catch (System.Exception ex)
                {
                    Debug.LogError($"[RabiConfigLib] Failed to load config file: {filePath}, error: {ex.Message}");
                }
            }

            Debug.Log($"[RabiConfigLib] Completed loading config files, total {txtFiles.Length} files");
            GenerateConfigs();
        }

        /// <summary>
        /// 加载单个txt文件
        /// </summary>
        /// <param name="filePath">文件路径</param>
        private void LoadTxtFile(string filePath)
        {
            var fileName = Path.GetFileNameWithoutExtension(filePath);
            Debug.Log($"[RabiConfigLib] Loading config file: {fileName}");
            var fileContent = File.ReadAllText(filePath);
            var reader = new CsvReader();
            reader.LoadText(fileContent);
            InsertData(fileName, reader);
            Debug.Log($"[RabiConfigLib] Config file loaded: {fileName}");
        }
    }
}
