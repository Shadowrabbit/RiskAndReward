// ******************************************************************
//       /\ /|       @file       CfgLootReward.cs
//       \ V/        @brief      auto generated by RabiConfigGenerator. ./Excel/LootReward.xlsx
//       | "")       @author     Shadowrabbit, yingtu0401@gmail.com
//       /  |
//      /  \\        @Modified   2022-04-25 13:25:11
//    *(__\_\        @Copyright  Copyright (c)  2022, Shadowrabbit
// ******************************************************************

using RabiConfigLib;
using UnityEngine;
using System;
using System.Linq;
using System.Collections.Generic;

namespace RiskAndReward.Configs
{
    public struct RowCfgLootReward
    {
        public string key; //key
        public string annotate; //注释
        public string defName; //None
        public float rewardFactor; //奖励因数
    }

    public class CfgLootReward
    {
        private readonly OrderedDictionary<string, RowCfgLootReward> _configs = new OrderedDictionary<string, RowCfgLootReward>(); //cfgId to row
        public RowCfgLootReward this[int key] => this[key.ToString()];
        public RowCfgLootReward this[string key] => _configs.ContainsKey(key) ? _configs[key] : throw new Exception($"Can't find config Cfg:{GetType()} key:{key}");
        public List<RowCfgLootReward> AllConfigs => _configs.Values.ToList();

        /// <summary>
        /// Retrieve row data
        /// </summary>
        public RowCfgLootReward Find(string i)
        {
            return this[i];
        }

        /// <summary>
        /// Load table data
        /// </summary>
        public void Load(CsvReader reader)
        {
            var dataMap = reader.GetDataMap();

            foreach (var data in dataMap.Values.Select(ParseRow))
            {
                _configs.TryAdd(data.key, data);
            }
        }

        /// <summary>
        /// Parse rows
        /// </summary>
        /// <param name="col"></param>
        /// <returns></returns>
        private RowCfgLootReward ParseRow(List<string>? col)
        {
            //Column index out of bounds
            if (col is { Count: < 4 })
            {
                Debug.LogError($"The configuration table field row index is out of bounds:{GetType()}");
                return default;
            }

            var data = new RowCfgLootReward();
            if (col == null) return data;
            var rowHelper = new RowHelper(col);
            data.key = CsvUtility.ToString(rowHelper.ReadNextCol()); //key
            data.annotate = CsvUtility.ToString(rowHelper.ReadNextCol()); //注释
            data.defName = CsvUtility.ToString(rowHelper.ReadNextCol()); //None
            data.rewardFactor = CsvUtility.ToFloat(rowHelper.ReadNextCol()); //奖励因数
            return data;
        }
    }
}